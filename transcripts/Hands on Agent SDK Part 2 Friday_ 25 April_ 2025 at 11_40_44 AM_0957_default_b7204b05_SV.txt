start_time	end_time	speaker	transcript
14.46	15.82	SPEAKER	i'll start from
21.57	164.11	SPEAKER	after assigning a memory space next we have next we have to define the tool function using google SDK why do we do this we have to ensure the google search is happening for the query which has been given it has to search with the help of what with the help of two things one the API key which is integrated and the search engine ID that search engine is not a normal open public search engine it is a custom google search engine which we have created and added that i'd into our code hope we are clear until here next we have to define the AI agents reasoning loop what is this reasoning loop it received goal the prompt which is received from the user then we will use google search tool which is created then we will result then we will display top three results it will have the result title URL and the snippet if any then we will store that in the memory with the help of memory append function we are trying to append the goal and the results so how many goals and results are stored that has been totaled total stored goals the numbers as we mentioned here next we are done with our goal tool and memory let's see what we can do next real time interaction i have just trying to give the real time feel of interaction with the SDK first it will state a welcome statement it will be printed then it will ask to enter your search goal what is your search goal for example top AI research labs in twenty twenty five i'll be typing the same then we will run when you run what will happen it will go to the reasoning loop which we have created here right after it enters the reasoning loop it will finish all the assigned functions then it will show all the memories at the end what are the different sorry
173.34	175.90	SPEAKER	once it completes the
179.63	210.67	SPEAKER	once it completes the execution of the functions in the reasoning loop it will show all the memory at the end so again you will have a for loop for that and we will try to list everything out so this is about the code of generating a custom search engine with the help of google SDK so the agent has been built so let's run
214.69	215.65	SPEAKER	let's run
218.40	218.84	SPEAKER	two
220.36	221.24	SPEAKER	let's run
227.86	236.94	SPEAKER	the output is this way it is try to take all the API 's the google authentications everything
238.77	250.29	SPEAKER	it is asking enter your search goal after welcoming us to AI agent google SDK so i am typing the same top AI
253.01	262.23	SPEAKER	research labs in twenty twenty five OK i'm clicking on enter once i do that
264.38	304.55	SPEAKER	agent has received the goal that is top AI research labs in twenty twenty five the tool is searching in google for the same then the AI has got top three results what are these results as i mentioned it has as i mentioned it is having title URL and a snippet so here is the title result number one result number two result number two and result number three so memory is stored goal and results total stored goals is one because i have given one single query right one single prompt
307.34	328.95	SPEAKER	one single prompt so this is how it will list in the final memory log so this is how this particular code works when you integrate and try to understand how does an agent SDK key components and google SDK works
331.10	383.35	SPEAKER	now there is one small constraint if you have observed or not i am not sure but i will try to explain what are the constraints do we have in this code first the agent operates only with the manual refinement no AI generated refinements available that's the fault that's the disadvantage search is limited to what google 's custom search API can return and it is having the quota limits it is restricted what do you do now you have a enhancement solution what all you can do let GPT also summarize the search results so we can automatically integrate open
384.87	385.75	SPEAKER	AI 's API code
387.60	389.04	SPEAKER	we can automatic sorry
391.43	413.03	SPEAKER	you can enhance this drawbacks by integrating open AI API key into the same code how do you do this how realistic it will be let's understand more about this we have old constraint that is the manual refinement issue now you can automatically add the GPT
414.55	429.68	SPEAKER	the agent becomes self sufficient it will think refine act that is search learn that is stores in the memory then what is the flow of execution of this particular thought let's see we have OK
432.87	491.67	SPEAKER	what is the flow of execution for this first agent receives the goal simple it will search in google using the goal this is what we were doing it now additional step is refining go additional step is refining goal using GPT so when you have given top AI research labs in twenty twenty five it will try to refine with the help of GPT leading artificial intelligence research institutes of worldwide twenty twenty five south this is a refinement that has been given to the goal which is already provided by the user it was searched in the google again using GPT refined goal and it will store both the goals and results both of it will be stored accordingly we are not changing the execution flow we are just adding the GPT version in middle that's it that's the only enhancement we are doing in order to keep it it particularly in order to keep it in realistic manner
493.19	511.47	SPEAKER	the same code you have imports you have API keys you have memory store tool number one tool number two tool number one is google search tool number two here this is the addition open aapi sorry open AI GPT for refined
514.31	622.87	SPEAKER	open AI GPT for refinement this is the tool number two we have we have all the functions that is sorry we have a function we have a function called refine query with GPT for that we have integrated few of the elements so we have kept the temperature max tokens is fifty so all these restrictions has also been put up and refined query also it will generate and give then the AI agent reasoning loop will start like before right it will again display the top three results it will again display the top three results then refine goal using GPT then display again the refined results so first it will display as it is the original then it will go towards the refined goal then it will create the result which is having the refined result so both of it will be stored in the memory so this is how this particular code will work with the enhancement of open AI sorry with the enhancement of open AI API key now you have to see one important thing with API key and search engine ID we also have open AI API key integrated so when you do this you have to go to open AI platform again it is only towards the paid version of chat GPT or open AI so you can just go to open AI platform generate the API key there and paste it right here so this is how the code will look like
624.44	624.72	SPEAKER	so
629.72	643.84	SPEAKER	this is how the code will look like you will get this particular code in your course just download try to replace all the API keys and run this particular code
662.35	674.16	SPEAKER	twenty twenty five you just copied the latest illa illa i'm not showing this still work it has a limited error because
676.12	693.11	SPEAKER	so rate limit so i have to do it very early in the morning then only i can take this homework i'm trying to make it a homework for them so i'm just teaching where what everything but i'm trying to give a homework
696.33	697.33	SPEAKER	so i'll
699.21	700.25	SPEAKER	just stop at that
730.35	734.47	SPEAKER	we have seen the use cases where we have integrated
736.01	832.81	SPEAKER	agent SDK and google SDK i mean agent SDK is key components the way it works it has been shown with the help of google SDK also there is a one small assignment you can just download this particular code try to execute the integration of open AI you can add the API key and try to run and check for the difference how realistic query looks like now let's continue with the benefits and challenges of agent SDK what are the benefits we have in agent SDK modularity as you saw there was certain modules very precise and clear goal is one module tool is one module results are one module memory is one module also we had the looping results looping sorry also we had looping that is another module so modularity plays a very important role in agent SDK then reusability for that we had an example of how do we reuse the original code and integrate another element to it integration again i can give the same example we had first created a normal manual code then we tried integrating that to open API with the help of its API key integration is very easy
834.79	859.93	SPEAKER	integration is very easy so these three things the major benefits of using agent SDK now what are the challenges do we face with agent SDK in spite of having benefits we also have challenges so tool chaining is a problem then we have debugging issues we have key considerations
862.55	863.79	SPEAKER	what is this what's a good
865.38	865.50	SPEAKER	umm
872.15	889.71	SPEAKER	connecting and manage connecting imagine multiple tool can be complex specifically when tools have different input on output requirements deepak identify resolving issues autonomous systems are bit difficult king is developers need to balance flexibility and complexity to ensure the agents effectively maintainable over time
892.42	895.86	SPEAKER	flexibility with the complexity
901.00	928.45	SPEAKER	let's see what are the challenges do we have in agent SDK first thing is tool chaining means integrating multiple tool into this SDK it would be difficult when the requirement of input is in one style and you get it in a different style the output differs so tool chaining is a problem is a challenge in agent SDK
930.01	950.57	SPEAKER	then debugging debugging an autonomous SDK is a little difficult because there's lots of elements to look through then key consideration maintaining the flexibility of agent SDK and also the complexity
952.20	969.29	SPEAKER	it is very difficult making the agent SDK a complex SDK and trying to make it flexible both hand in hand balancing this is little difficult that's a challenge that's the key consideration which you have to see
971.60	975.48	SPEAKER	hope we are clear with the benefits and the challenges of agent SDK
977.45	981.37	SPEAKER	now here we are at the last section of the session summary
991.94	1000.49	SPEAKER	now here we are at the last section of the session that is summary first we learned about what is AI
1002.62	1002.78	SPEAKER	is it
1008.18	1072.97	SPEAKER	let's have a quick recap first we learnt what is agent SDK it's a framework or a toolkit which will help in order to create AI agents which is automatic in nature as simple as that then we saw key components that is goal memory tool and reasoning loop so these things play a very very important role when it comes to a agent SDK here goal is nothing but the objectives memory is storing the data tools are external sources in our example it was google SDK and the reasoning loop is the logic to any query that has been given to the agent it will decide the actions so we learned about this in a theoretical way also in a practical way then it allows agents in order to store the information interact with the tool make decisions and deliver the goal so
1074.89	1121.37	SPEAKER	achieving the goal automatically is one of the element which we saw next agent SDK provides an autonomy automatic nature modularity flexibility and task automation so this is the benefits which we saw and the challenges included integration debugging issues and managing external resources when it is integrated with agent SDK that would be little difficult so hope we are clear with what is agent SDK how does this work we also saw a use case a simple demo where we created
1123.72	1124.76	SPEAKER	where make
1126.93	1133.69	SPEAKER	where we created custom google search with the help of google SDK
1136.97	1137.85	SPEAKER	how do i conclude
1140.63	1141.27	SPEAKER	hope this
1147.33	1151.53	SPEAKER	hope this session was helpful we'll meet in the next one thank you
1154.10	1155.30	SPEAKER	amma devre
